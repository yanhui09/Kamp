#--------------
configfile: "config.yaml"
#wildcard_constraints:
#    barcode="[a-zA-Z]+[0-9]+",
#    c1="[0-9]+",
#    cand="[0-9]+"
#--------------
DATABASE_DIR = config["database_dir"].rstrip("/")

def check_val(var, val, class_type):
    if not isinstance(val, class_type):
        warns = ("\n  " + str(var) + " only accepts " + str(class_type) + " values." +
        "\n  " + str(val) + " is used in config.yaml file.")
        raise ValueError(warns)

# check list elements
def check_list_ele(var, val, eles):
    var = var.capitalize()
    if val:
        for i in val:
            if i not in eles:
                raise ValueError("\n  {} parameters not recognized.\n  Please choose from {} in the config.yaml file.".format(var,eles))
    else:
        raise ValueError("\n  {} parameters not specified.\n  Please choose from {} in the config.yaml file.".format(var,eles))

def chimera_filt(uchime = config["uchime"]):
    check_val("uchime", uchime, bool)
    if uchime == False:
        return ["count_matrix.tsv", "rep_seqs.fasta"]
    else:
        return ["count_matrix_filt.tsv", "rep_seqs_filt.fasta"]

localrules: all, demux, qc, clust, kmerCon, miniCon, isoCon, umiCon, quant, taxa, tree, merge
rule all:
    input:
        chimera_filt(),
        ["taxonomy/" + str(x) + "/taxonomy.tsv" for x in config["classifier"]],
        "taxonomy.tsv",
        ["tree/" + str(x) + "/tree.nwk" for x in config["phylogeny"]],
        "tree.nwk",

include: "rules/init.smk"
#include: "rules/simulate.smk"
include: "rules/demux.smk"
include: "rules/qc.smk"
include: "rules/clust.smk"
include: "rules/consensus.smk"
include: "rules/umiCon.smk"
include: "rules/quant.smk"
include: "rules/merge.smk"
include: "rules/taxonomy.smk"
include: "rules/tree.smk"

rule demux:
    input: lambda wc: expand("qc/{barcode}.fastq", barcode=get_demux_barcodes(wc))

rule qc:
    input: lambda wc: get_filt(wc),

rule clust:
    input: lambda wc: get_kmerclust(wc, export_centroids=True)

rule kmerCon:
    input: "kmerCon/kmerCon.fna"

rule miniCon:
    input: "miniCon/miniCon.fna"

rule isoCon:
    input: "isoCon/isoCon.fna"

rule umiCon:
    input: "umiCon/umiCon_trimmed.fna"

rule quant:
    input: chimera_filt()

rule taxa: 
    input:
        ["taxonomy/" + str(x) + "/taxonomy.tsv" for x in config["classifier"]],
        "taxonomy.tsv",

rule tree: 
    input:
        ["tree/" + str(x) + "/tree.nwk" for x in config["phylogeny"]],
        "tree.nwk",

def collect_merge(
    bascdir = config["basecalled_dir"], 
    demuxdir = config["demultiplexed_dir"], 
    merge_runs = config["merge_runs"],
    classifier = config["classifier"],
    phylogeny = config["phylogeny"]):
    out = ["rep_seqs_merged.fasta", "count_matrix_merged.tsv"]
    if bascdir is None and demuxdir is None and merge_runs is not None:
        out += ["taxonomy/" + str(x) + "/taxonomy.tsv" for x in classifier]
        out += ["tree/" + str(x) + "/tree.nwk" for x in phylogeny]
        out += ["taxonomy.tsv", "tree.nwk"]
    return out

rule merge:
    input: collect_merge()

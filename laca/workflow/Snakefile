#--------------
configfile: "config.yaml"
#--------------
DATABASE_DIR = config["database_dir"].rstrip("/")
def check_inp(basecalled = config["basecalled_dir"], demultiplexed = config["demultiplexed_dir"]):
    # at least one of basecalled_dir or demultiplexed_dir must be specified
    if basecalled is None and demultiplexed is None:
        raise ValueError("\n  At least one of basecalled_dir or demultiplexed_dir is specified in config.\n")
check_inp()

def check_val(var, val, class_type):
    if not isinstance(val, class_type):
        warns = ("\n  " + str(var) + " only accepts " + str(class_type) + " values." +
        "\n  " + str(val) + " is used in config.yaml file.")
        raise ValueError(warns)

# check list elements
def check_list_ele(var, val, eles):
    var = var.capitalize()
    if val:
        for i in val:
            if i not in eles:
                raise ValueError("\n  {} parameters not recognized.\n  Please choose from {} in the config.yaml file.".format(var,eles))
    else:
        raise ValueError("\n  {} parameters not specified.\n  Please choose from {} in the config.yaml file.".format(var,eles))

def chimeraF(chimera_check = config["chimeraF"]):
    check_val("chimeraF", chimera_check, bool)
    if chimera_check == False:
        return ["count_matrix.tsv", "rep_seqs.fasta"]
    else:
        return ["chimeraF/" + x for x in ["table_nonchimeras.tsv", "rep_seqs_nonchimeras.fasta"]]

rule all:
    input:
        chimeraF(),
        ["taxonomy/" + str(x) + "/taxonomy.tsv" for x in config["classifier"]],
        "taxonomy.tsv",
        ["tree/" + str(x) + "/tree.nwk" for x in config["phylogeny"]],
        "tree.nwk",

include: "rules/init.smk"
#include: "rules/nanosim.smk"
include: "rules/demux.smk"
include: "rules/qc.smk"
include: "rules/kmerBin.smk"
include: "rules/clustCon.smk"
include: "rules/umiCon.smk"
include: "rules/quant.smk"
include: "rules/requant.smk"
include: "rules/taxonomy.smk"
include: "rules/tree.smk"

rule demux:
    input: lambda wc: expand("qc/{barcode}.fastq", barcode=get_demux_barcodes(wc))

rule qc:
    input: lambda wc: get_filt(wc),

rule kmerBin:
    input: lambda wc: get_kmerBin(wc),

rule kmerCon:
    input: "kmerCon/kmerCon.fna"

rule clustCon:
    input: "clustCon/clustCon.fna"

rule isONclustCon:
    input: "isONclustCon/isONclustCon.fna"

rule isONcorCon:
    input: "isONcorCon/isONcorCon.fna"

rule umiCon:
    input: "umiCon/umiCon_trimmed.fna"

rule quant:
    input: chimeraF()

rule taxa: 
    input:
        ["taxonomy/" + str(x) + "/taxonomy.tsv" for x in config["classifier"]],
        "taxonomy.tsv",

rule tree: 
    input:
        ["tree/" + str(x) + "/tree.nwk" for x in config["phylogeny"]],
        "tree.nwk",

rule requant:
    input:
        "rep_seqs_requant.fasta",
        "count_matrix_requant.tsv",

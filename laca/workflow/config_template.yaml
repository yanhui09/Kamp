# variables to configure the workflow on a global scale
basecalled_dir: 
database_dir: 
demultiplexed_dir:
merge_runs:

threads:
  normal: 2 # common jobs
  large: 6 # threads-dependent jobs
mem:
  normal: 10
  large: 50
# runtime (h) only for cluster excution
runtime:
  default: 5
  long: 30
  simple: 1

# Pooling samples for denoise [true|false]
pool: true
##############################################################
# Demultiplex [nanopore]
demuxer: guppy # guppy | minibar 
guppy:
  barcode_kits: "SQK16S-GXO192"
minibar:
  args: "-p 0.75 -l 160"
nreads_m: 1000 # rm barcoded samples in shallow sequencing
##############################################################
# Quality control
# subsample reads if with inadequate memory
subsample: false
# filter reads by quality and length range
seqkit:
  n: 5000 # subsampling number [int]
  min_qual: 7
  min_len: 800
  max_len: 1600

# primer-pattern check
primer_check: true
# order matters
fprimer:
  27Fa: "AGAGTTTGATYMTGGCTYAG"
  27Fb: "AGGGTTCGATTCTGGCTCAG"
  338Fa: "ACWCCTACGGGWGGCAGCAG"
  338Fb: "GACTCCTACGGGAGGCWGCAG"
rprimer: 
  1540R: "TACGGYTACCTTGTTACGACT"
  1391R: "GACGGGCGGTGTGTRCA"

cutadapt:
  max_errors: 0.2
  min_overlap: 6
  # https://cutadapt.readthedocs.io/en/stable/guide.html#action
  # trim|retain|none
  action: retain 

# filter chimeric reads with yacrd
chimera_filt: true
yacrd:
  minimap2:
    # ont: -g 500; pacbio: -g 5000
    g: 500
  # ont|pacbio P6-C4: -c 4; pacbio Sequal: -c 3
  c: 4
  n: 0.4
##############################################################
#  global read clustering
min_cluster_size: 10
cluster:
#  - isONclust
#  - umapclust
#  - meshclust

isONclust:
  # --ont: --k13 --w20; --isoseq: --k15 --w50
  k: 13
  w: 20

umapclust:
  # To mitagate the memory bottleneck of umap in pooling mode, batch mode is induced. 
  # zero or negative values to bin all reads together; 
  # postive integer to bin in n batches due to limited rams; 
  # or use "auto" estimation;
  batch_size: -1
  umap:
    n_neighbors: 15 # Increase this for global structure
    min_dist: 0.1 # Lower this to increase density for clustering (0.0, 0.99)
  hdbscan:
    min_bin_size: 50 # Define the smallest size to bin
    min_samples: 50 # Increase this for more conservative clustering - more points as noise
    epsilon: 0.5 # Lower this for more micro-clusters

meshclust:
  max_batch_size: 25000 # default: -1, no batch use
  t: 0.9 #keep it empty for auto-estimation
##############################################################
# consensus mode [kmerCon|miniCon|isoCon|umiCon]
min_support_reads: 10
# kmerCon: consensus from direct kmer bins
# miniCon: refined kmer consensus based on pairwise alignment with minimap2 [orignal method in https://genome.cshlp.org/content/30/3/437]
# isoCon: IsoCon (close similarity)
# umiCon: suspend primer-check with cutadapt to preseve UMIs in QC
consensus:
  #- kmerCon # the first is the final kOTUs 
  #- isoCon
  #- miniCon 
  #- umiCon

miniCon:
  max_batch_size: 5000 # -1, no batch use, may have low yeild for large clusters
  min_score_frac: 0.8

isoCon:
  run_isONcorrect: true
  # speed up with small values, e.g. 500, 1000, 
  # but may affect quality if nearest neighbors not found, default: 2**32
  # https://github.com/ksahlin/IsoCon/issues/3
  neighbor_search_depth: default
  p_value_threshold: 0.01
  # evenly paritioned to run in batch if the number of reads bigger than the set value
  # default: -1, no batch use
  max_batch_size: -1

minimap2:
  # choose by reads type; https://github.com/lh3/minimap2
  # ont: ava-ont; pb: ava-pb
  x_ava: ava-ont # [yacrd & miniCon]
  # ont: map-ont; pb-clr: map-pb, pb-css: asm20 (< v2.18), map-hifi (> v2.19)
  x_map: map-ont # [polish & quant]
  # a high threshold when mapping against redunadnt 16S sequences.
  # https://github.com/lh3/minimap2/issues/897
  f: 10000 # [yacrd & miniCon & polish & quant]
  # maximally allowed gap-compressed per-base sequence divergence as valid mapping, 
  # filter mismappings due to partial sequence similarity when creating abundance matrix with minimap2
  max_de: 0.075 # [quant]

racon:
  iter: 2
  m: 8
  x: -6
  g: -8
  w: 500
  
medaka:
  iter: 1 
  m:  r941_min_hac_g507
  cudnn: False
##############################################################
# create abundance matrix by sequence id or minimap2 mapping, the first is the final
# seqid|minimap2: seqid, recommended in pool mode; minimap2, recommended in single sample mode
quant: 
  - seqid
  #- minimap2 
# Filter chimera with qiime2-vesearch [uchime-denovo] 
uchime: False
##############################################################
# Taxonomy assignment
classifier:
  - q2blast # the first to be the final
  #- kraken2
  #- mmseqs2

mmseqs2:
  min_id: 0.99
  c: 0.9 # the fraction of aligned residues
  taxdb: SILVA # predefined taxonomy database name in `mmseqs databases`; The provided NT database do not have taxonomy info yet.
  # make a custom seqTaxDB using local blast databases;
  blastdb_alias: "refseq_rna" # alias for blast database; leave this as empty string [""] if you want to use the default database by mmseqs2
  lca: 4 #LCA Mode 1: single search LCA, 2/3: approximate 2bLCA (not supported in NT-NT match ), 4: top hit [4]

kraken2:
  # Prebuilt database: https://benlangmead.github.io/aws-indexes/k2
  prebuilt: "https://genome-idx.s3.amazonaws.com/kraken/k2_standard_20220607.tar.gz"
  classify_cmd: "--confidence 0.05" # use --confidence 0.05 for standard database 

q2blast:
  split_by_nseq: 20 # split by N sequence for parallel
##############################################################
# Build a de novo phylogenetic tree
# shortest amplified region in multi-primer PCR design
fprimer_max:
  338Fa: "ACWCCTACGGGWGGCAGCAG"
  338Fb: "GACTCCTACGGGAGGCWGCAG"
rprimer_min:
  1391R: "GACGGGCGGTGTGTRCA"

phylogeny:
  - FastTree # the first to be the final
  #- IQ-TREE
  #- RAxML

q2phylo:
  # supplementary parameters for q2_phylogen pipeline `align-to-tree-mafft-{fasttree, iqtree, raxml}`
  # https://docs.qiime2.org/2021.11/plugins/available/phylogeny/
  fasttree: ""
  iqtree: ""
  raxml: ""
##############################################################
# UMI extraction with seqkit and cutadapt
umi:
  # keep it loose for putative UMIs in tolerated error
  loc: 200 # robust location containing the adaptor-UMI-primer pattern, leaving only the start/end regions to find UMIs
  len: 15 # base length of UMI on 5' and 3' side. Their length shall be the same.
  # concatenated UMI regions on both sides, whitespaces will be trimmed automatically
  # use IUPAC code https://www.bioinformatics.org/sms/iupac.html
  pattern: "NNNNN NNNNN NNNNN NNNNN NNNNN NNNNN"
  # extract potential UMIs with cutadapt
  cutadapt: 
    max_errors: 0.2 # -e, high error tolerance 
    min_overlap: 8 # -O
  cl_identity: 0.9 # umi cluster similarity
  # keep it conservative for trusted UMI bins
  s: 90 # Check start of read up to s bp for validated UMIs.
  e: 90 # Check end of read up to f bp for validated UMIs.
  # params to filter umi bins, inherited from 
  # https://github.com/SorenKarst/longread_umi/blob/master/scripts/nanopore_pipeline.sh
  # https://github.com/SorenKarst/longread_umi/blob/master/scripts/umi_binning.sh
  u: 3.5 # UMI match error filter
  U: 30  # UMI match error SD filter
  O: 0.20 # Min read orientation fraction
  N: 10000 # Maximum number of reads +/-
  S: 10 # UMI bin size/UMI cluster size cutoff.
# linker and primer for umi extraction
flinker: "GTCTCGTGGGCTCGG"
rlinker: "GTCTCGTGGGCTCGG"
#########################################################################################
# in silico test with Badreads
simulate:
  min_id: 90,95,97,98,99
  max_id: 95,97,98,99,100
  min_len: -1 # -1 infinite 
  max_len: -1
  n_refs: 10 # n sequences as reference
  # n depth values for the reference sequences, following its order of ref_1,ref_2,...ref_n
  # appended in fasta header, used by Badread
  depth: 1,1,1,1,1,1,1,1,1,1 
  badread:
    # an absolute value (e.g. 250M) or a relative depth (e.g. 25x) 
    quantity: 10x,20x,40x,60x,80x,100x,200x,400x,800x
    identity: 87.5,97.5,5
    error_model: nanopore2020
    qscore_model: nanopore2020
    start_adapter: 100,100
    end_adapter: 100,100
    start_adapter_seq:
    end_adapter_seq:
    junk_reads: 0
    random_reads: 0
    chimeras: 1
    glitches: 0,0,0
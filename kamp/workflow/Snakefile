#--------------
configfile: "config.yaml"
#--------------
INPUT_DIR = config["basecalled_dir"].rstrip("/")
DATABASE_DIR = config["database_dir"].rstrip("/")

def check_val(var, val, class_type):
    if not isinstance(val, class_type):
        warns = ('\n\t' + str(var) + ' only accepts ' + str(class_type) + ' values.' +
         '\n\t' + str(val) + ' is used in config.yaml file.')
        raise ValueError(warns)

# check list elements
def check_list_ele(var, val, eles):
    var = var.capitalize()
    if val:
        for i in val:
            if i not in eles:
                raise ValueError("\t\n{} parameters not recognized.\t\nPlease choose from {} in the config.yaml file.".format(var,eles))
    else:
        raise ValueError("\t\n{} parameters not specified.\t\nPlease choose from {} in the config.yaml file.".format(var,eles))

rule all:
    input:
        ["taxonomy/" + str(x) + "/taxonomy.tsv" for x in config["classifier"]],
        "taxonomy.tsv",
        ["tree/" + str(x) + "/tree.nwk" for x in config["phylogen"]],
        "tree.nwk",

include: "rules/init.smk"
#include: "rules/nanosim.smk"
include: "rules/demultiplex.smk"
include: "rules/qc.smk"
include: "rules/kmerBin.smk"
include: "rules/clustCon.smk"
include: "rules/umiCon.smk"
include: "rules/quant.smk"
include: "rules/requant.smk"
include: "rules/taxonomy.smk"
include: "rules/tree.smk"

rule demultiplex:
    input: lambda wc: expand("qc/{barcode}.fastq", barcode=get_demultiplexed(wc))

rule qc:
    input: lambda wc: get_filt(wc),

rule kmerBin:
    input: lambda wc: get_kmerBin(wc),

rule kmerCon:
    input: "kmerCon/kmerCon.fna"

rule clustCon:
    input: "kmerCon/clustCon.fna"

rule isONclustCon:
    input: "isONclustCon/isONclustCon.fna"

rule isONcorCon:
    input: "isONcorCon/isONcorCon.fna"

rule umiCon:
    input: "umiCon/umiCon_trimmed.fna"

rule quant:
    input: chimeraF()

rule taxa: 
    input:
        ["taxonomy/" + str(x) + "/taxonomy.tsv" for x in config["classifier"]],
        "taxonomy.tsv",

rule tree: 
    input:
        ["tree/" + str(x) + "/tree.nwk" for x in config["phylogen"]],
        "tree.nwk",

rule requant:
    input:
        "rep_seqs_requant.fasta",
        "count_matrix_requant.tsv",

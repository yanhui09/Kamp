#--------------
configfile: "config.yaml"
#--------------
INPUT_DIR = config["basecalled_dir"].rstrip("/")
DATABASE_DIR = config["database_dir"].rstrip("/")

# Allow users to fix the underlying OS via singularity.
#singularity: "docker://continuumio/miniconda3"

def check_val(var, val, class_type):
    if not isinstance(val, class_type):
        warns = ('\n\t' + str(var) + ' only accepts ' + str(class_type) + ' values.' +
         '\n\t' + str(val) + ' is used in config.yaml file.')
        raise ValueError(warns)

# check list elements
def check_list_ele(var, val, eles):
    var = var.capitalize()
    if val:
        for i in val:
            if i not in eles:
                raise ValueError("\t\n{} parameters not recognized.\t\nPlease choose from {} in the config.yaml file.".format(var,eles))
    else:
        raise ValueError("\t\n{} parameters not specified.\t\nPlease choose from {} in the config.yaml file.".format(var,eles))

rule all:
    input:
        ".demultiplex_DONE",
        ".qc_DONE",
        ".kmerBin_DONE",
        ".quant_DONE",
        ".taxa_DONE",
        ".tree_DONE",

include: "rules/init.smk"
#include: "rules/nanosim.smk"
include: "rules/demultiplex.smk"
include: "rules/qc.smk"
include: "rules/kmerBin.smk"
include: "rules/clustCon.smk"
include: "rules/umiCon.smk"
include: "rules/quant.smk"
include: "rules/requant.smk"
include: "rules/taxonomy.smk"
include: "rules/tree.smk"

rule demultiplex:
    input: lambda wc: expand("qc/{barcode}.fastq", barcode=get_demultiplexed(wc))
    output: temp(touch(".demultiplex_DONE"))

rule qc:
    input: lambda wc: get_filt(wc, pool = config["pool"]),
    output: temp(touch(".qc_DONE"))

rule kmerBin:
    input: lambda wc: get_kmerBin(wc, pool = config["pool"], kmerbin = config["kmerbin"]),
    output: temp(touch(".kmerBin_DONE"))

rule kmerCon:
    input:
        ".kmerBin_DONE",
        "kmerCon.fna"
    output: temp(touch(".kmerCon_DONE"))

rule clustCon:
    input:
        ".kmerBin_DONE",
        "clustCon.fna"
    output: temp(touch(".clustCon_DONE"))

rule isONclustCon:
    input:
        ".kmerBin_DONE",
        "isONclustCon.fna"
    output: temp(touch(".isONclustCon_DONE"))

rule isONcorCon:
    input: 
        ".kmerBin_DONE",
        "isONcorCon.fna"
    output: temp(touch(".isONcorCon_DONE"))

rule umiCon:
    input: 
        "umiCon.fna"
    output: temp(touch(".umiCon_DONE"))

rule quant:
    input: chimeraF(config["chimeraF"])
    output: temp(touch(".quant_DONE"))

rule taxa: 
    input:
        ["taxonomy/" + str(x) + "/taxonomy.tsv" for x in config["classifier"]],
        "taxonomy.tsv",
    output: temp(touch(".taxa_DONE"))

rule tree: 
    input:
        ["tree/" + str(x) + "/tree.nwk" for x in config["phylogen"]],
        "tree.nwk",
    output: temp(touch(".tree_DONE"))

rule requant:
    input:
        "rep_seqs_requant.fasta",
        "count_matrix_requant.tsv",
    output: temp(touch(".requant_DONE"))
